{"version":3,"sources":["functions/hexToHSL.js","components/ColourInput.js","functions/convertToHSL.js","components/ColourOutput.js","App.js","index.js"],"names":["hexToHSL","hex","hexObject","red","green","blue","length","splitIntoIndividualHexNotations","hexTo8BitFraction","smallestChannel","Math","min","greatestChannel","max","hue","delta","round","calculateHue","saturation","lightness","abs","Number","toFixed","calculateSaturation","calculateLightness","hexColour","ColourInput","setHSLColour","useState","colourInput","setColourInput","className","onSubmit","e","preventDefault","htmlFor","name","onChange","target","value","ColourOutput","hslColour","YesColourOutput","NoColourOutput","style","backgroundColor","height","width","onClick","hslValue","navigator","clipboard","writeText","copyColourToClipboard","border","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98e6b286.chunk.js","sourcesContent":["export function hexToHSL(hex) {\n  const hexObject = splitIntoIndividualHexNotations(hex);\n\n  const red = hexTo8BitFraction(hexObject.red);\n  const green = hexTo8BitFraction(hexObject.green);\n  const blue = hexTo8BitFraction(hexObject.blue);\n\n  const smallestChannel = Math.min(red, green, blue);\n  const greatestChannel = Math.max(red, green, blue);\n  const delta = greatestChannel - smallestChannel;\n\n  const hue = calculateHue(red, green, blue, delta, greatestChannel);\n  const saturation = calculateSaturation(greatestChannel, smallestChannel);\n  const lightness = calculateLightness(greatestChannel, smallestChannel);\n\n  return {\n    hue: hue,\n    saturation: saturation,\n    lightness: lightness,\n  };\n}\n\nfunction splitIntoIndividualHexNotations(hex) {\n  let red;\n  let green;\n  let blue;\n\n  // # + 3 digits\n  if (hex.length === 4) {\n    red = \"0x\" + hex[1] + hex[1];\n    green = \"0x\" + hex[2] + hex[2];\n    blue = \"0x\" + hex[3] + hex[3];\n\n    // # + 6 digits\n  } else if (hex.length === 7) {\n    red = \"0x\" + hex[1] + hex[2];\n    green = \"0x\" + hex[3] + hex[4];\n    blue = \"0x\" + hex[5] + hex[6];\n  }\n\n  return {\n    red: red,\n    green: green,\n    blue: blue,\n  };\n}\n\nfunction hexTo8BitFraction(hexColour) {\n  return hexColour / 255;\n}\n\nfunction calculateHue(red, green, blue, delta, greatestChannel) {\n  let hue = 0;\n\n  if (delta === 0) {\n    hue = 0;\n  } else if (greatestChannel === red) {\n    hue = ((green - blue) / delta) % 6;\n  } else if (greatestChannel === green) {\n    hue = (blue - red) / delta + 2;\n  } else {\n    hue = (red - green) / delta + 4;\n  }\n\n  hue = Math.round(hue * 60);\n\n  if (hue < 0) {\n    hue = hue + 360;\n  }\n\n  return Math.round(hue);\n}\n\nfunction calculateSaturation(greatestChannel, smallestChannel) {\n  let delta = greatestChannel - smallestChannel;\n  let lightness = (greatestChannel + smallestChannel) / 2;\n\n  let saturation = 0;\n\n  if (delta === 0) {\n    saturation = 0;\n  } else {\n    saturation = delta / (1 - Math.abs(2 * lightness - 1));\n    saturation = Number((saturation * 100).toFixed(1));\n  }\n\n  return Math.round(saturation);\n}\n\nfunction calculateLightness(greatestChannel, smallestChannel) {\n  let lightness = (greatestChannel + smallestChannel) / 2;\n  lightness = Number((lightness * 100).toFixed(1));\n\n  return Math.round(lightness);\n}\n","import { useState } from \"react\";\nimport { convertToHSL } from \"../functions/convertToHSL\";\n\nexport function ColourInput({setHSLColour}){\n    const [colourInput, setColourInput] = useState(null);\n\n    return(\n        <form\n          className=\"colour-input-section\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            setHSLColour(convertToHSL(`#${colourInput}`));\n          }}\n        >\n          <label htmlFor=\"colour-input\">Colour</label>\n          <input\n            name=\"colour-input\"\n            onChange={(e) => setColourInput(e.target.value)}\n          ></input>\n          <button>Convert to hsl</button>\n        </form>\n    )\n}\n\n// ----------------------------------------------------------------------------------------------------\n","import { hexToHSL } from \"./hexToHSL\";\n\nexport function convertToHSL(colour) {\n  return hexToHSL(colour);\n}\n\n// ----------------------------------------------------------------------------------------------------\n","export function ColourOutput({ hslColour }) {\n  return hslColour ? (\n    <YesColourOutput hslColour={hslColour} />\n  ) : (\n    <NoColourOutput />\n  );\n}\n\n// ----------------------------------------------------------------------------------------------------\nfunction YesColourOutput({ hslColour }) {\n    const hue = hslColour.hue;\n    const saturation = hslColour.saturation;\n    const lightness = hslColour.lightness;\n\n  return (\n    <section className=\"colour-output-section\">\n      <div\n        className=\"colour-swatch\"\n        style={{\n          backgroundColor: `hsl(${hue}, ${saturation}%, ${lightness}%)`,\n          height: \"250px\",\n          width: \"250px\",\n        }}\n      ></div>\n\n      <div className=\"hsl-text\" onClick={()=> copyColourToClipboard(hue, saturation, lightness)}>\n        <p className=\"hsl-value\">{`hsl(${hue}, ${saturation}%, ${lightness}%)`}</p>\n      </div>\n    </section>\n  );\n}\n\nfunction NoColourOutput() {\n  return (\n    <section className=\"colour-output-section\">\n      <div\n        className=\"colour-swatch\"\n        style={{\n          border: \"2px dotted black\",\n          height: \"250px\",\n          width: \"250px\",\n        }}\n      ></div>\n\n      <div className=\"hsl-text\">\n        <p>No colour just yet</p>\n      </div>\n    </section>\n  );\n}\n\nfunction copyColourToClipboard(hue, saturation, lightness) {\n    const hslValue = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n    navigator.clipboard.writeText(hslValue);\n  }","import { useState } from \"react\";\nimport \"./App.css\";\nimport { ColourInput } from \"./components/ColourInput\";\nimport { ColourOutput } from \"./components/ColourOutput\";\n\nfunction App() {\n  const [hslColour, setHSLColour] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <main>\n        <h1>Colour Converter</h1>\n        <ColourInput setHSLColour={setHSLColour}/>\n\n        <ColourOutput hslColour={hslColour}/>\n\n        <p>^ Click to Copy</p>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}